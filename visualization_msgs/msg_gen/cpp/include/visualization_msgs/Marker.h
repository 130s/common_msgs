/* Auto-generated by genmsg_cpp for file /wg/stor2a/dgossow/ros_sandbox/visualization_msgs/msg/Marker.msg */
#ifndef VISUALIZATION_MSGS_MESSAGE_MARKER_H
#define VISUALIZATION_MSGS_MESSAGE_MARKER_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Vector3.h"
#include "std_msgs/ColorRGBA.h"
#include "geometry_msgs/Point.h"
#include "std_msgs/ColorRGBA.h"

namespace visualization_msgs
{
template <class ContainerAllocator>
struct Marker_ : public ros::Message
{
  typedef Marker_<ContainerAllocator> Type;

  Marker_()
  : header()
  , ns()
  , id(0)
  , type(0)
  , action(0)
  , pose()
  , scale()
  , color()
  , lifetime()
  , frame_locked(false)
  , points()
  , colors()
  , text()
  , mesh_resource()
  , mesh_use_embedded_materials(false)
  {
  }

  Marker_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ns(_alloc)
  , id(0)
  , type(0)
  , action(0)
  , pose(_alloc)
  , scale(_alloc)
  , color(_alloc)
  , lifetime()
  , frame_locked(false)
  , points(_alloc)
  , colors(_alloc)
  , text(_alloc)
  , mesh_resource(_alloc)
  , mesh_use_embedded_materials(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ns_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ns;

  typedef int32_t _id_type;
  int32_t id;

  typedef int32_t _type_type;
  int32_t type;

  typedef int32_t _action_type;
  int32_t action;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _scale_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  scale;

  typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
   ::std_msgs::ColorRGBA_<ContainerAllocator>  color;

  typedef ros::Duration _lifetime_type;
  ros::Duration lifetime;

  typedef uint8_t _frame_locked_type;
  uint8_t frame_locked;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  points;

  typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  _colors_type;
  std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  colors;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  text;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mesh_resource_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mesh_resource;

  typedef uint8_t _mesh_use_embedded_materials_type;
  uint8_t mesh_use_embedded_materials;

  enum { ARROW = 0 };
  enum { CUBE = 1 };
  enum { SPHERE = 2 };
  enum { CYLINDER = 3 };
  enum { LINE_STRIP = 4 };
  enum { LINE_LIST = 5 };
  enum { CUBE_LIST = 6 };
  enum { SPHERE_LIST = 7 };
  enum { POINTS = 8 };
  enum { TEXT_VIEW_FACING = 9 };
  enum { MESH_RESOURCE = 10 };
  enum { TRIANGLE_LIST = 11 };
  enum { ADD = 0 };
  enum { MODIFY = 0 };
  enum { DELETE = 2 };

  ROS_DEPRECATED uint32_t get_points_size() const { return (uint32_t)points.size(); }
  ROS_DEPRECATED void set_points_size(uint32_t size) { points.resize((size_t)size); }
  ROS_DEPRECATED void get_points_vec(std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other > & vec) const { vec = this->points; }
  ROS_DEPRECATED void set_points_vec(const std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other > & vec) { this->points = vec; }
  ROS_DEPRECATED uint32_t get_colors_size() const { return (uint32_t)colors.size(); }
  ROS_DEPRECATED void set_colors_size(uint32_t size) { colors.resize((size_t)size); }
  ROS_DEPRECATED void get_colors_vec(std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other > & vec) const { vec = this->colors; }
  ROS_DEPRECATED void set_colors_vec(const std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other > & vec) { this->colors = vec; }
private:
  static const char* __s_getDataType_() { return "visualization_msgs/Marker"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "bc7602ad2ba78f4cbe1c23250683bdc0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\
\n\
byte ARROW=0\n\
byte CUBE=1\n\
byte SPHERE=2\n\
byte CYLINDER=3\n\
byte LINE_STRIP=4\n\
byte LINE_LIST=5\n\
byte CUBE_LIST=6\n\
byte SPHERE_LIST=7\n\
byte POINTS=8\n\
byte TEXT_VIEW_FACING=9\n\
byte MESH_RESOURCE=10\n\
byte TRIANGLE_LIST=11\n\
\n\
byte ADD=0\n\
byte MODIFY=0\n\
byte DELETE=2\n\
\n\
Header header                        # header for time/frame information\n\
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n\
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n\
int32 type 		                       # Type of object\n\
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n\
geometry_msgs/Pose pose                 # Pose of the object\n\
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
std_msgs/ColorRGBA color             # Color [0.0-1.0]\n\
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n\
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\
\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
geometry_msgs/Point[] points\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
#number of colors must either be 0 or equal to the number of points\n\
#NOTE: alpha is not yet used\n\
std_msgs/ColorRGBA[] colors\n\
\n\
# NOTE: only used for text markers\n\
string text\n\
\n\
# NOTE: only used for MESH_RESOURCE markers\n\
string mesh_resource\n\
bool mesh_use_embedded_materials\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, ns);
    ros::serialization::serialize(stream, id);
    ros::serialization::serialize(stream, type);
    ros::serialization::serialize(stream, action);
    ros::serialization::serialize(stream, pose);
    ros::serialization::serialize(stream, scale);
    ros::serialization::serialize(stream, color);
    ros::serialization::serialize(stream, lifetime);
    ros::serialization::serialize(stream, frame_locked);
    ros::serialization::serialize(stream, points);
    ros::serialization::serialize(stream, colors);
    ros::serialization::serialize(stream, text);
    ros::serialization::serialize(stream, mesh_resource);
    ros::serialization::serialize(stream, mesh_use_embedded_materials);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, ns);
    ros::serialization::deserialize(stream, id);
    ros::serialization::deserialize(stream, type);
    ros::serialization::deserialize(stream, action);
    ros::serialization::deserialize(stream, pose);
    ros::serialization::deserialize(stream, scale);
    ros::serialization::deserialize(stream, color);
    ros::serialization::deserialize(stream, lifetime);
    ros::serialization::deserialize(stream, frame_locked);
    ros::serialization::deserialize(stream, points);
    ros::serialization::deserialize(stream, colors);
    ros::serialization::deserialize(stream, text);
    ros::serialization::deserialize(stream, mesh_resource);
    ros::serialization::deserialize(stream, mesh_use_embedded_materials);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(ns);
    size += ros::serialization::serializationLength(id);
    size += ros::serialization::serializationLength(type);
    size += ros::serialization::serializationLength(action);
    size += ros::serialization::serializationLength(pose);
    size += ros::serialization::serializationLength(scale);
    size += ros::serialization::serializationLength(color);
    size += ros::serialization::serializationLength(lifetime);
    size += ros::serialization::serializationLength(frame_locked);
    size += ros::serialization::serializationLength(points);
    size += ros::serialization::serializationLength(colors);
    size += ros::serialization::serializationLength(text);
    size += ros::serialization::serializationLength(mesh_resource);
    size += ros::serialization::serializationLength(mesh_use_embedded_materials);
    return size;
  }

  typedef boost::shared_ptr< ::visualization_msgs::Marker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visualization_msgs::Marker_<ContainerAllocator>  const> ConstPtr;
}; // struct Marker
typedef  ::visualization_msgs::Marker_<std::allocator<void> > Marker;

typedef boost::shared_ptr< ::visualization_msgs::Marker> MarkerPtr;
typedef boost::shared_ptr< ::visualization_msgs::Marker const> MarkerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::visualization_msgs::Marker_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::visualization_msgs::Marker_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace visualization_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::visualization_msgs::Marker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bc7602ad2ba78f4cbe1c23250683bdc0";
  }

  static const char* value(const  ::visualization_msgs::Marker_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbc7602ad2ba78f4cULL;
  static const uint64_t static_value2 = 0xbe1c23250683bdc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::visualization_msgs::Marker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "visualization_msgs/Marker";
  }

  static const char* value(const  ::visualization_msgs::Marker_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::visualization_msgs::Marker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\
\n\
byte ARROW=0\n\
byte CUBE=1\n\
byte SPHERE=2\n\
byte CYLINDER=3\n\
byte LINE_STRIP=4\n\
byte LINE_LIST=5\n\
byte CUBE_LIST=6\n\
byte SPHERE_LIST=7\n\
byte POINTS=8\n\
byte TEXT_VIEW_FACING=9\n\
byte MESH_RESOURCE=10\n\
byte TRIANGLE_LIST=11\n\
\n\
byte ADD=0\n\
byte MODIFY=0\n\
byte DELETE=2\n\
\n\
Header header                        # header for time/frame information\n\
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n\
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n\
int32 type 		                       # Type of object\n\
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n\
geometry_msgs/Pose pose                 # Pose of the object\n\
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
std_msgs/ColorRGBA color             # Color [0.0-1.0]\n\
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n\
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\
\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
geometry_msgs/Point[] points\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
#number of colors must either be 0 or equal to the number of points\n\
#NOTE: alpha is not yet used\n\
std_msgs/ColorRGBA[] colors\n\
\n\
# NOTE: only used for text markers\n\
string text\n\
\n\
# NOTE: only used for MESH_RESOURCE markers\n\
string mesh_resource\n\
bool mesh_use_embedded_materials\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
";
  }

  static const char* value(const  ::visualization_msgs::Marker_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::visualization_msgs::Marker_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::visualization_msgs::Marker_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::visualization_msgs::Marker_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ns);
    stream.next(m.id);
    stream.next(m.type);
    stream.next(m.action);
    stream.next(m.pose);
    stream.next(m.scale);
    stream.next(m.color);
    stream.next(m.lifetime);
    stream.next(m.frame_locked);
    stream.next(m.points);
    stream.next(m.colors);
    stream.next(m.text);
    stream.next(m.mesh_resource);
    stream.next(m.mesh_use_embedded_materials);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Marker_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visualization_msgs::Marker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::visualization_msgs::Marker_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ns: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ns);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "scale: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.scale);
    s << indent << "color: ";
s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "lifetime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.lifetime);
    s << indent << "frame_locked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_locked);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.colors[i]);
    }
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "mesh_resource: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mesh_resource);
    s << indent << "mesh_use_embedded_materials: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mesh_use_embedded_materials);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISUALIZATION_MSGS_MESSAGE_MARKER_H

