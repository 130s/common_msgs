/* Auto-generated by genmsg_cpp for file /wg/stor2a/dgossow/ros_sandbox/visualization_msgs/msg/InteractiveMarkerFeedback.msg */
#ifndef VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKERFEEDBACK_H
#define VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKERFEEDBACK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Pose.h"

namespace visualization_msgs
{
template <class ContainerAllocator>
struct InteractiveMarkerFeedback_ : public ros::Message
{
  typedef InteractiveMarkerFeedback_<ContainerAllocator> Type;

  InteractiveMarkerFeedback_()
  : marker_name()
  , control_name()
  , event_type(0)
  , pose()
  , selected_menu_entry()
  {
  }

  InteractiveMarkerFeedback_(const ContainerAllocator& _alloc)
  : marker_name(_alloc)
  , control_name(_alloc)
  , event_type(0)
  , pose(_alloc)
  , selected_menu_entry(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _marker_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  marker_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _control_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  control_name;

  typedef int8_t _event_type_type;
  int8_t event_type;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _selected_menu_entry_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  selected_menu_entry;

  enum { POSE_UPDATE = 0 };
  enum { RECEIVE_FOCUS = 1 };
  enum { LOSE_FOCUS = 2 };
  enum { MENU_SELECT = 3 };
  enum { BUTTON_CLICK = 4 };

  ROS_DEPRECATED uint32_t get_selected_menu_entry_size() const { return (uint32_t)selected_menu_entry.size(); }
  ROS_DEPRECATED void set_selected_menu_entry_size(uint32_t size) { selected_menu_entry.resize((size_t)size); }
  ROS_DEPRECATED void get_selected_menu_entry_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->selected_menu_entry; }
  ROS_DEPRECATED void set_selected_menu_entry_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->selected_menu_entry = vec; }
private:
  static const char* __s_getDataType_() { return "visualization_msgs/InteractiveMarkerFeedback"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f3a9d9042bdfbcd749d8e8358cd412f9"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# message that is sent back from the GUI \n\
# when the status of an interactive marker was modified by the user\n\
\n\
# specifies which interactive marker and control this message refers to\n\
string marker_name\n\
string control_name\n\
\n\
# specifies what type of event happened\n\
# RECEIVE/LOSE_FOCUS: mouse enters or leaves the control's screen area\n\
# MENU_SELECT: a menu entry has been selected\n\
# BUTTON_CLICK: a button control has been clicked\n\
# POSE_UPDATE: the pose has been changed using one of the controls\n\
byte POSE_UPDATE = 0\n\
byte RECEIVE_FOCUS = 1\n\
byte LOSE_FOCUS = 2\n\
byte MENU_SELECT = 3\n\
byte BUTTON_CLICK = 4\n\
\n\
byte event_type\n\
\n\
# current pose of the marker\n\
geometry_msgs/Pose pose\n\
\n\
# contains the text of a menu / sub menu entry, if one has been selected\n\
# first entry: selected top-level item (if any)\n\
# second entry: selected second-level item (if any)\n\
string[] selected_menu_entry\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, marker_name);
    ros::serialization::serialize(stream, control_name);
    ros::serialization::serialize(stream, event_type);
    ros::serialization::serialize(stream, pose);
    ros::serialization::serialize(stream, selected_menu_entry);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, marker_name);
    ros::serialization::deserialize(stream, control_name);
    ros::serialization::deserialize(stream, event_type);
    ros::serialization::deserialize(stream, pose);
    ros::serialization::deserialize(stream, selected_menu_entry);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(marker_name);
    size += ros::serialization::serializationLength(control_name);
    size += ros::serialization::serializationLength(event_type);
    size += ros::serialization::serializationLength(pose);
    size += ros::serialization::serializationLength(selected_menu_entry);
    return size;
  }

  typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct InteractiveMarkerFeedback
typedef  ::visualization_msgs::InteractiveMarkerFeedback_<std::allocator<void> > InteractiveMarkerFeedback;

typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarkerFeedback> InteractiveMarkerFeedbackPtr;
typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarkerFeedback const> InteractiveMarkerFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace visualization_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3a9d9042bdfbcd749d8e8358cd412f9";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3a9d9042bdfbcd7ULL;
  static const uint64_t static_value2 = 0x49d8e8358cd412f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "visualization_msgs/InteractiveMarkerFeedback";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# message that is sent back from the GUI \n\
# when the status of an interactive marker was modified by the user\n\
\n\
# specifies which interactive marker and control this message refers to\n\
string marker_name\n\
string control_name\n\
\n\
# specifies what type of event happened\n\
# RECEIVE/LOSE_FOCUS: mouse enters or leaves the control's screen area\n\
# MENU_SELECT: a menu entry has been selected\n\
# BUTTON_CLICK: a button control has been clicked\n\
# POSE_UPDATE: the pose has been changed using one of the controls\n\
byte POSE_UPDATE = 0\n\
byte RECEIVE_FOCUS = 1\n\
byte LOSE_FOCUS = 2\n\
byte MENU_SELECT = 3\n\
byte BUTTON_CLICK = 4\n\
\n\
byte event_type\n\
\n\
# current pose of the marker\n\
geometry_msgs/Pose pose\n\
\n\
# contains the text of a menu / sub menu entry, if one has been selected\n\
# first entry: selected top-level item (if any)\n\
# second entry: selected second-level item (if any)\n\
string[] selected_menu_entry\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.marker_name);
    stream.next(m.control_name);
    stream.next(m.event_type);
    stream.next(m.pose);
    stream.next(m.selected_menu_entry);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InteractiveMarkerFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::visualization_msgs::InteractiveMarkerFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "marker_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.marker_name);
    s << indent << "control_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.control_name);
    s << indent << "event_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.event_type);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "selected_menu_entry[]" << std::endl;
    for (size_t i = 0; i < v.selected_menu_entry.size(); ++i)
    {
      s << indent << "  selected_menu_entry[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.selected_menu_entry[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKERFEEDBACK_H

