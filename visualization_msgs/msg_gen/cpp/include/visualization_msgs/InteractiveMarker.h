/* Auto-generated by genmsg_cpp for file /wg/stor2a/dgossow/ros_sandbox/visualization_msgs/msg/InteractiveMarker.msg */
#ifndef VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKER_H
#define VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKER_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "visualization_msgs/Menu.h"
#include "visualization_msgs/InteractiveMarkerControl.h"

namespace visualization_msgs
{
template <class ContainerAllocator>
struct InteractiveMarker_ : public ros::Message
{
  typedef InteractiveMarker_<ContainerAllocator> Type;

  InteractiveMarker_()
  : header()
  , name()
  , pose()
  , scale(0.0)
  , menu()
  , controls()
  , frame_locked(false)
  {
  }

  InteractiveMarker_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , name(_alloc)
  , pose(_alloc)
  , scale(0.0)
  , menu(_alloc)
  , controls(_alloc)
  , frame_locked(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef float _scale_type;
  float scale;

  typedef std::vector< ::visualization_msgs::Menu_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::Menu_<ContainerAllocator> >::other >  _menu_type;
  std::vector< ::visualization_msgs::Menu_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::Menu_<ContainerAllocator> >::other >  menu;

  typedef std::vector< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> >::other >  _controls_type;
  std::vector< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> >::other >  controls;

  typedef uint8_t _frame_locked_type;
  uint8_t frame_locked;


  ROS_DEPRECATED uint32_t get_menu_size() const { return (uint32_t)menu.size(); }
  ROS_DEPRECATED void set_menu_size(uint32_t size) { menu.resize((size_t)size); }
  ROS_DEPRECATED void get_menu_vec(std::vector< ::visualization_msgs::Menu_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::Menu_<ContainerAllocator> >::other > & vec) const { vec = this->menu; }
  ROS_DEPRECATED void set_menu_vec(const std::vector< ::visualization_msgs::Menu_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::Menu_<ContainerAllocator> >::other > & vec) { this->menu = vec; }
  ROS_DEPRECATED uint32_t get_controls_size() const { return (uint32_t)controls.size(); }
  ROS_DEPRECATED void set_controls_size(uint32_t size) { controls.resize((size_t)size); }
  ROS_DEPRECATED void get_controls_vec(std::vector< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> >::other > & vec) const { vec = this->controls; }
  ROS_DEPRECATED void set_controls_vec(const std::vector< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> >::other > & vec) { this->controls = vec; }
private:
  static const char* __s_getDataType_() { return "visualization_msgs/InteractiveMarker"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "96318414ab713ab56c50ee14846f6197"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#Time/frame info\n\
#The frame_id of this pose is used as 'parent frame' for the controls\n\
#which have a fixed orientation.\n\
Header header\n\
\n\
# Name of this marker. Only necessary if you are sending multiple markers.\n\
# See InteractiveMarkerArray for details.\n\
string name\n\
\n\
# Initial pose of the interactive marker. Defines the pivot point for rotations.\n\
geometry_msgs/Pose pose\n\
\n\
# Scale to be used for default controls (default=1).\n\
float32 scale\n\
\n\
# Menu associated with this marker (max. depth is 2).\n\
Menu[] menu\n\
\n\
# List of controls displayed for this marker.\n\
# To delete an interactive marker, send one without controls.\n\
InteractiveMarkerControl[] controls\n\
\n\
# If this marker should be frame-locked, i.e. retransformed \n\
# into its parent frame every timestep.\n\
bool frame_locked\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: visualization_msgs/Menu\n\
# menu / entry title\n\
string title\n\
\n\
# entries for this menu\n\
# if empty, this menu represents a simple menu entry itself\n\
string[] entries\n\
\n\
================================================================================\n\
MSG: visualization_msgs/InteractiveMarkerControl\n\
# represents a control that is to be displayed together with an interactive marker\n\
\n\
# Identifying string for this control.\n\
# You need to assign a unique value to this to receive feedback from the GUI\n\
# on what actions the user performs on this control (e.g. a button click).\n\
string name\n\
\n\
# Defines the local coordinate frame (relative to the pose of the parent\n\
# interactive marker) in which is being rotated and translated.\n\
# Note: Does not influence the pose of the contained markers.\n\
geometry_msgs/Quaternion orientation\n\
\n\
# Interaction mode for this control\n\
# \n\
# NONE: this control is only meant for visualization, context menu is deactivated\n\
# MENU: like none, but right-click menu is active\n\
# BUTTON: element can be left-clicked\n\
# MOVE_AXIS: Translate along local x-axis\n\
# MOVE_PLANE: Translate in local y-z plane\n\
# ROTATE_AXIS: Rotate around local x-axis\n\
# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS\n\
byte NONE = 0 \n\
byte MENU = 1\n\
byte BUTTON = 2\n\
byte MOVE_AXIS = 3 \n\
byte MOVE_PLANE = 4\n\
byte ROTATE_AXIS = 5\n\
byte MOVE_ROTATE = 6\n\
\n\
byte interaction_mode\n\
\n\
# how should the orientation be updated?\n\
# INHERIT: follow orientation of interactive marker\n\
# FIXED: keep orientation fixed at initial state\n\
# VIEW_FACING: align y-z plane with screen (x: forward, y:left, z:up)\n\
byte INHERIT = 0 \n\
byte FIXED = 1\n\
byte VIEW_FACING = 2 \n\
\n\
byte orientation_mode\n\
\n\
# if true, the contained markers will also be visible\n\
# when the gui is not in interactive mode\n\
bool always_visible\n\
\n\
# Markers to be displayed as custom visual representation.\n\
# Leave this empty to use the default control handles.\n\
#\n\
# Note: \n\
# - The markers can be defined in an arbitrary coordinate frame,\n\
#   but will be transformed into the local frame of the interactive marker.\n\
# - If the header of a marker is empty, its pose will be interpreted as \n\
#   relative to the pose of the parent interactive marker.\n\
Marker[] markers\n\
\n\
# Short description (<80 characters) of what this control does,\n\
# e.g. \"Move the robot\". If no tool tip is given, a generic description\n\
# based on the interaction mode is assigned.\n\
string tool_tip\n\
\n\
================================================================================\n\
MSG: visualization_msgs/Marker\n\
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\
\n\
byte ARROW=0\n\
byte CUBE=1\n\
byte SPHERE=2\n\
byte CYLINDER=3\n\
byte LINE_STRIP=4\n\
byte LINE_LIST=5\n\
byte CUBE_LIST=6\n\
byte SPHERE_LIST=7\n\
byte POINTS=8\n\
byte TEXT_VIEW_FACING=9\n\
byte MESH_RESOURCE=10\n\
byte TRIANGLE_LIST=11\n\
\n\
byte ADD=0\n\
byte MODIFY=0\n\
byte DELETE=2\n\
\n\
Header header                        # header for time/frame information\n\
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n\
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n\
int32 type 		                       # Type of object\n\
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n\
geometry_msgs/Pose pose                 # Pose of the object\n\
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
std_msgs/ColorRGBA color             # Color [0.0-1.0]\n\
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n\
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\
\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
geometry_msgs/Point[] points\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
#number of colors must either be 0 or equal to the number of points\n\
#NOTE: alpha is not yet used\n\
std_msgs/ColorRGBA[] colors\n\
\n\
# NOTE: only used for text markers\n\
string text\n\
\n\
# NOTE: only used for MESH_RESOURCE markers\n\
string mesh_resource\n\
bool mesh_use_embedded_materials\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, pose);
    ros::serialization::serialize(stream, scale);
    ros::serialization::serialize(stream, menu);
    ros::serialization::serialize(stream, controls);
    ros::serialization::serialize(stream, frame_locked);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, pose);
    ros::serialization::deserialize(stream, scale);
    ros::serialization::deserialize(stream, menu);
    ros::serialization::deserialize(stream, controls);
    ros::serialization::deserialize(stream, frame_locked);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(pose);
    size += ros::serialization::serializationLength(scale);
    size += ros::serialization::serializationLength(menu);
    size += ros::serialization::serializationLength(controls);
    size += ros::serialization::serializationLength(frame_locked);
    return size;
  }

  typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarker_<ContainerAllocator>  const> ConstPtr;
}; // struct InteractiveMarker
typedef  ::visualization_msgs::InteractiveMarker_<std::allocator<void> > InteractiveMarker;

typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarker> InteractiveMarkerPtr;
typedef boost::shared_ptr< ::visualization_msgs::InteractiveMarker const> InteractiveMarkerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::visualization_msgs::InteractiveMarker_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace visualization_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96318414ab713ab56c50ee14846f6197";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarker_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96318414ab713ab5ULL;
  static const uint64_t static_value2 = 0x6c50ee14846f6197ULL;
};

template<class ContainerAllocator>
struct DataType< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "visualization_msgs/InteractiveMarker";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarker_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Time/frame info\n\
#The frame_id of this pose is used as 'parent frame' for the controls\n\
#which have a fixed orientation.\n\
Header header\n\
\n\
# Name of this marker. Only necessary if you are sending multiple markers.\n\
# See InteractiveMarkerArray for details.\n\
string name\n\
\n\
# Initial pose of the interactive marker. Defines the pivot point for rotations.\n\
geometry_msgs/Pose pose\n\
\n\
# Scale to be used for default controls (default=1).\n\
float32 scale\n\
\n\
# Menu associated with this marker (max. depth is 2).\n\
Menu[] menu\n\
\n\
# List of controls displayed for this marker.\n\
# To delete an interactive marker, send one without controls.\n\
InteractiveMarkerControl[] controls\n\
\n\
# If this marker should be frame-locked, i.e. retransformed \n\
# into its parent frame every timestep.\n\
bool frame_locked\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: visualization_msgs/Menu\n\
# menu / entry title\n\
string title\n\
\n\
# entries for this menu\n\
# if empty, this menu represents a simple menu entry itself\n\
string[] entries\n\
\n\
================================================================================\n\
MSG: visualization_msgs/InteractiveMarkerControl\n\
# represents a control that is to be displayed together with an interactive marker\n\
\n\
# Identifying string for this control.\n\
# You need to assign a unique value to this to receive feedback from the GUI\n\
# on what actions the user performs on this control (e.g. a button click).\n\
string name\n\
\n\
# Defines the local coordinate frame (relative to the pose of the parent\n\
# interactive marker) in which is being rotated and translated.\n\
# Note: Does not influence the pose of the contained markers.\n\
geometry_msgs/Quaternion orientation\n\
\n\
# Interaction mode for this control\n\
# \n\
# NONE: this control is only meant for visualization, context menu is deactivated\n\
# MENU: like none, but right-click menu is active\n\
# BUTTON: element can be left-clicked\n\
# MOVE_AXIS: Translate along local x-axis\n\
# MOVE_PLANE: Translate in local y-z plane\n\
# ROTATE_AXIS: Rotate around local x-axis\n\
# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS\n\
byte NONE = 0 \n\
byte MENU = 1\n\
byte BUTTON = 2\n\
byte MOVE_AXIS = 3 \n\
byte MOVE_PLANE = 4\n\
byte ROTATE_AXIS = 5\n\
byte MOVE_ROTATE = 6\n\
\n\
byte interaction_mode\n\
\n\
# how should the orientation be updated?\n\
# INHERIT: follow orientation of interactive marker\n\
# FIXED: keep orientation fixed at initial state\n\
# VIEW_FACING: align y-z plane with screen (x: forward, y:left, z:up)\n\
byte INHERIT = 0 \n\
byte FIXED = 1\n\
byte VIEW_FACING = 2 \n\
\n\
byte orientation_mode\n\
\n\
# if true, the contained markers will also be visible\n\
# when the gui is not in interactive mode\n\
bool always_visible\n\
\n\
# Markers to be displayed as custom visual representation.\n\
# Leave this empty to use the default control handles.\n\
#\n\
# Note: \n\
# - The markers can be defined in an arbitrary coordinate frame,\n\
#   but will be transformed into the local frame of the interactive marker.\n\
# - If the header of a marker is empty, its pose will be interpreted as \n\
#   relative to the pose of the parent interactive marker.\n\
Marker[] markers\n\
\n\
# Short description (<80 characters) of what this control does,\n\
# e.g. \"Move the robot\". If no tool tip is given, a generic description\n\
# based on the interaction mode is assigned.\n\
string tool_tip\n\
\n\
================================================================================\n\
MSG: visualization_msgs/Marker\n\
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n\
\n\
byte ARROW=0\n\
byte CUBE=1\n\
byte SPHERE=2\n\
byte CYLINDER=3\n\
byte LINE_STRIP=4\n\
byte LINE_LIST=5\n\
byte CUBE_LIST=6\n\
byte SPHERE_LIST=7\n\
byte POINTS=8\n\
byte TEXT_VIEW_FACING=9\n\
byte MESH_RESOURCE=10\n\
byte TRIANGLE_LIST=11\n\
\n\
byte ADD=0\n\
byte MODIFY=0\n\
byte DELETE=2\n\
\n\
Header header                        # header for time/frame information\n\
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n\
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n\
int32 type 		                       # Type of object\n\
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n\
geometry_msgs/Pose pose                 # Pose of the object\n\
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n\
std_msgs/ColorRGBA color             # Color [0.0-1.0]\n\
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n\
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n\
\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
geometry_msgs/Point[] points\n\
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n\
#number of colors must either be 0 or equal to the number of points\n\
#NOTE: alpha is not yet used\n\
std_msgs/ColorRGBA[] colors\n\
\n\
# NOTE: only used for text markers\n\
string text\n\
\n\
# NOTE: only used for MESH_RESOURCE markers\n\
string mesh_resource\n\
bool mesh_use_embedded_materials\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
";
  }

  static const char* value(const  ::visualization_msgs::InteractiveMarker_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::visualization_msgs::InteractiveMarker_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.name);
    stream.next(m.pose);
    stream.next(m.scale);
    stream.next(m.menu);
    stream.next(m.controls);
    stream.next(m.frame_locked);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct InteractiveMarker_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visualization_msgs::InteractiveMarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::visualization_msgs::InteractiveMarker_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "scale: ";
    Printer<float>::stream(s, indent + "  ", v.scale);
    s << indent << "menu[]" << std::endl;
    for (size_t i = 0; i < v.menu.size(); ++i)
    {
      s << indent << "  menu[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visualization_msgs::Menu_<ContainerAllocator> >::stream(s, indent + "    ", v.menu[i]);
    }
    s << indent << "controls[]" << std::endl;
    for (size_t i = 0; i < v.controls.size(); ++i)
    {
      s << indent << "  controls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visualization_msgs::InteractiveMarkerControl_<ContainerAllocator> >::stream(s, indent + "    ", v.controls[i]);
    }
    s << indent << "frame_locked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_locked);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISUALIZATION_MSGS_MESSAGE_INTERACTIVEMARKER_H

