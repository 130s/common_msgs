"""autogenerated by genmsg_py from InteractiveMarkerUpdate.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime
import geometry_msgs.msg
import visualization_msgs.msg
import std_msgs.msg

class InteractiveMarkerUpdate(roslib.message.Message):
  _md5sum = "45d278ed8c428219b5fae4da46c9f9ba"
  _type = "visualization_msgs/InteractiveMarkerUpdate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """InteractiveMarker[] markers
InteractiveMarkerPose[] poses

================================================================================
MSG: visualization_msgs/InteractiveMarker
#Time/frame info
#The frame_id of this pose is used as 'parent frame' for the controls
#which have a fixed orientation.
Header header

# Name of this marker. Only necessary if you are sending multiple markers.
# See InteractiveMarkerArray for details.
string name

# Initial pose of the interactive marker. Defines the pivot point for rotations.
geometry_msgs/Pose pose

# Scale to be used for default controls (default=1).
float32 scale

# Menu associated with this marker (max. depth is 2).
Menu[] menu

# List of controls displayed for this marker.
# To delete an interactive marker, send one without controls.
InteractiveMarkerControl[] controls

# If this marker should be frame-locked, i.e. retransformed 
# into its parent frame every timestep.
bool frame_locked

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: visualization_msgs/Menu
# menu / entry title
string title

# entries for this menu
# if empty, this menu represents a simple menu entry itself
string[] entries

================================================================================
MSG: visualization_msgs/InteractiveMarkerControl
# represents a control that is to be displayed together with an interactive marker

# Identifying string for this control.
# You need to assign a unique value to this to receive feedback from the GUI
# on what actions the user performs on this control (e.g. a button click).
string name

# Defines the local coordinate frame (relative to the pose of the parent
# interactive marker) in which is being rotated and translated.
# Note: Does not influence the pose of the contained markers.
geometry_msgs/Quaternion orientation

# Interaction mode for this control
# 
# NONE: this control is only meant for visualization, context menu is deactivated
# MENU: like none, but right-click menu is active
# BUTTON: element can be left-clicked
# MOVE_AXIS: Translate along local x-axis
# MOVE_PLANE: Translate in local y-z plane
# ROTATE_AXIS: Rotate around local x-axis
# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS
byte NONE = 0 
byte MENU = 1
byte BUTTON = 2
byte MOVE_AXIS = 3 
byte MOVE_PLANE = 4
byte ROTATE_AXIS = 5
byte MOVE_ROTATE = 6

byte interaction_mode

# how should the orientation be updated?
# INHERIT: follow orientation of interactive marker
# FIXED: keep orientation fixed at initial state
# VIEW_FACING: align y-z plane with screen (x: forward, y:left, z:up)
byte INHERIT = 0 
byte FIXED = 1
byte VIEW_FACING = 2 

byte orientation_mode

# if true, the contained markers will also be visible
# when the gui is not in interactive mode
bool always_visible

# Markers to be displayed as custom visual representation.
# Leave this empty to use the default control handles.
#
# Note: 
# - The markers can be defined in an arbitrary coordinate frame,
#   but will be transformed into the local frame of the interactive marker.
# - If the header of a marker is empty, its pose will be interpreted as 
#   relative to the pose of the parent interactive marker.
Marker[] markers

# Short description (<80 characters) of what this control does,
# e.g. "Move the robot". If no tool tip is given, a generic description
# based on the interaction mode is assigned.
string tool_tip

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

byte ARROW=0
byte CUBE=1
byte SPHERE=2
byte CYLINDER=3
byte LINE_STRIP=4
byte LINE_LIST=5
byte CUBE_LIST=6
byte SPHERE_LIST=7
byte POINTS=8
byte TEXT_VIEW_FACING=9
byte MESH_RESOURCE=10
byte TRIANGLE_LIST=11

byte ADD=0
byte MODIFY=0
byte DELETE=2

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: visualization_msgs/InteractiveMarkerPose
string name
geometry_msgs/Pose pose

"""
  __slots__ = ['markers','poses']
  _slot_types = ['visualization_msgs/InteractiveMarker[]','visualization_msgs/InteractiveMarkerPose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       markers,poses
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InteractiveMarkerUpdate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.markers is None:
        self.markers = []
      if self.poses is None:
        self.poses = []
    else:
      self.markers = []
      self.poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_f.pack(val1.scale))
        length = len(val1.menu)
        buff.write(_struct_I.pack(length))
        for val2 in val1.menu:
          _x = val2.title
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.entries)
          buff.write(_struct_I.pack(length))
          for val3 in val2.entries:
            length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(val1.controls)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controls:
          _x = val2.name
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v6 = val2.orientation
          _x = _v6
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2bB.pack(_x.interaction_mode, _x.orientation_mode, _x.always_visible))
          length = len(val2.markers)
          buff.write(_struct_I.pack(length))
          for val3 in val2.markers:
            _v7 = val3.header
            buff.write(_struct_I.pack(_v7.seq))
            _v8 = _v7.stamp
            _x = _v8
            buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
            _x = _v7.frame_id
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.ns
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3
            buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
            _v9 = val3.pose
            _v10 = _v9.position
            _x = _v10
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v11 = _v9.orientation
            _x = _v11
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
            _v12 = val3.scale
            _x = _v12
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v13 = val3.color
            _x = _v13
            buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
            _v14 = val3.lifetime
            _x = _v14
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
            buff.write(_struct_B.pack(val3.frame_locked))
            length = len(val3.points)
            buff.write(_struct_I.pack(length))
            for val4 in val3.points:
              _x = val4
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            length = len(val3.colors)
            buff.write(_struct_I.pack(length))
            for val4 in val3.colors:
              _x = val4
              buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
            _x = val3.text
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.mesh_resource
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            buff.write(_struct_B.pack(val3.mesh_use_embedded_materials))
          _x = val2.tool_tip
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.frame_locked))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v15 = val1.pose
        _v16 = _v15.position
        _x = _v16
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v17 = _v15.orientation
        _x = _v17
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarker()
        _v18 = val1.header
        start = end
        end += 4
        (_v18.seq,) = _struct_I.unpack(str[start:end])
        _v19 = _v18.stamp
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v18.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v20 = val1.pose
        _v21 = _v20.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v22 = _v20.orientation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.scale,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.menu = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.Menu()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.title = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.entries = []
          for i in xrange(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3 = str[start:end]
            val2.entries.append(val3)
          val1.menu.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controls = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.InteractiveMarkerControl()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.name = str[start:end]
          _v23 = val2.orientation
          _x = _v23
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 3
          (_x.interaction_mode, _x.orientation_mode, _x.always_visible,) = _struct_2bB.unpack(str[start:end])
          val2.always_visible = bool(val2.always_visible)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.markers = []
          for i in xrange(0, length):
            val3 = visualization_msgs.msg.Marker()
            _v24 = val3.header
            start = end
            end += 4
            (_v24.seq,) = _struct_I.unpack(str[start:end])
            _v25 = _v24.stamp
            _x = _v25
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            _v24.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.ns = str[start:end]
            _x = val3
            start = end
            end += 12
            (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
            _v26 = val3.pose
            _v27 = _v26.position
            _x = _v27
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v28 = _v26.orientation
            _x = _v28
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v29 = val3.scale
            _x = _v29
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v30 = val3.color
            _x = _v30
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
            _v31 = val3.lifetime
            _x = _v31
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            start = end
            end += 1
            (val3.frame_locked,) = _struct_B.unpack(str[start:end])
            val3.frame_locked = bool(val3.frame_locked)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.points = []
            for i in xrange(0, length):
              val4 = geometry_msgs.msg.Point()
              _x = val4
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val3.points.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.colors = []
            for i in xrange(0, length):
              val4 = std_msgs.msg.ColorRGBA()
              _x = val4
              start = end
              end += 16
              (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
              val3.colors.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.text = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.mesh_resource = str[start:end]
            start = end
            end += 1
            (val3.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
            val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
            val2.markers.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.tool_tip = str[start:end]
          val1.controls.append(val2)
        start = end
        end += 1
        (val1.frame_locked,) = _struct_B.unpack(str[start:end])
        val1.frame_locked = bool(val1.frame_locked)
        self.markers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarkerPose()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v32 = val1.pose
        _v33 = _v32.position
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v34 = _v32.orientation
        _x = _v34
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.markers:
        _v35 = val1.header
        buff.write(_struct_I.pack(_v35.seq))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v37 = val1.pose
        _v38 = _v37.position
        _x = _v38
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v39 = _v37.orientation
        _x = _v39
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_f.pack(val1.scale))
        length = len(val1.menu)
        buff.write(_struct_I.pack(length))
        for val2 in val1.menu:
          _x = val2.title
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.entries)
          buff.write(_struct_I.pack(length))
          for val3 in val2.entries:
            length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(val1.controls)
        buff.write(_struct_I.pack(length))
        for val2 in val1.controls:
          _x = val2.name
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v40 = val2.orientation
          _x = _v40
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_struct_2bB.pack(_x.interaction_mode, _x.orientation_mode, _x.always_visible))
          length = len(val2.markers)
          buff.write(_struct_I.pack(length))
          for val3 in val2.markers:
            _v41 = val3.header
            buff.write(_struct_I.pack(_v41.seq))
            _v42 = _v41.stamp
            _x = _v42
            buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
            _x = _v41.frame_id
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.ns
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3
            buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
            _v43 = val3.pose
            _v44 = _v43.position
            _x = _v44
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v45 = _v43.orientation
            _x = _v45
            buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
            _v46 = val3.scale
            _x = _v46
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            _v47 = val3.color
            _x = _v47
            buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
            _v48 = val3.lifetime
            _x = _v48
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
            buff.write(_struct_B.pack(val3.frame_locked))
            length = len(val3.points)
            buff.write(_struct_I.pack(length))
            for val4 in val3.points:
              _x = val4
              buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
            length = len(val3.colors)
            buff.write(_struct_I.pack(length))
            for val4 in val3.colors:
              _x = val4
              buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
            _x = val3.text
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val3.mesh_resource
            length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            buff.write(_struct_B.pack(val3.mesh_use_embedded_materials))
          _x = val2.tool_tip
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.frame_locked))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v49 = val1.pose
        _v50 = _v49.position
        _x = _v50
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v51 = _v49.orientation
        _x = _v51
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.markers = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarker()
        _v52 = val1.header
        start = end
        end += 4
        (_v52.seq,) = _struct_I.unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v52.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v54 = val1.pose
        _v55 = _v54.position
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v56 = _v54.orientation
        _x = _v56
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (val1.scale,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.menu = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.Menu()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.title = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.entries = []
          for i in xrange(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3 = str[start:end]
            val2.entries.append(val3)
          val1.menu.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.controls = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.InteractiveMarkerControl()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.name = str[start:end]
          _v57 = val2.orientation
          _x = _v57
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _x = val2
          start = end
          end += 3
          (_x.interaction_mode, _x.orientation_mode, _x.always_visible,) = _struct_2bB.unpack(str[start:end])
          val2.always_visible = bool(val2.always_visible)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.markers = []
          for i in xrange(0, length):
            val3 = visualization_msgs.msg.Marker()
            _v58 = val3.header
            start = end
            end += 4
            (_v58.seq,) = _struct_I.unpack(str[start:end])
            _v59 = _v58.stamp
            _x = _v59
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            _v58.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.ns = str[start:end]
            _x = val3
            start = end
            end += 12
            (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
            _v60 = val3.pose
            _v61 = _v60.position
            _x = _v61
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v62 = _v60.orientation
            _x = _v62
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
            _v63 = val3.scale
            _x = _v63
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            _v64 = val3.color
            _x = _v64
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
            _v65 = val3.lifetime
            _x = _v65
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            start = end
            end += 1
            (val3.frame_locked,) = _struct_B.unpack(str[start:end])
            val3.frame_locked = bool(val3.frame_locked)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.points = []
            for i in xrange(0, length):
              val4 = geometry_msgs.msg.Point()
              _x = val4
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
              val3.points.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val3.colors = []
            for i in xrange(0, length):
              val4 = std_msgs.msg.ColorRGBA()
              _x = val4
              start = end
              end += 16
              (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
              val3.colors.append(val4)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.text = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            val3.mesh_resource = str[start:end]
            start = end
            end += 1
            (val3.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
            val3.mesh_use_embedded_materials = bool(val3.mesh_use_embedded_materials)
            val2.markers.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.tool_tip = str[start:end]
          val1.controls.append(val2)
        start = end
        end += 1
        (val1.frame_locked,) = _struct_B.unpack(str[start:end])
        val1.frame_locked = bool(val1.frame_locked)
        self.markers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarkerPose()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v66 = val1.pose
        _v67 = _v66.position
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v68 = _v66.orientation
        _x = _v68
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
_struct_f = struct.Struct("<f")
_struct_2I = struct.Struct("<2I")
_struct_2i = struct.Struct("<2i")
_struct_3i = struct.Struct("<3i")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2bB = struct.Struct("<2bB")
_struct_3d = struct.Struct("<3d")
