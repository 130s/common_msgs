"""autogenerated by genmsg_py from InteractiveMarker.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime
import geometry_msgs.msg
import visualization_msgs.msg
import std_msgs.msg

class InteractiveMarker(roslib.message.Message):
  _md5sum = "96318414ab713ab56c50ee14846f6197"
  _type = "visualization_msgs/InteractiveMarker"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Time/frame info
#The frame_id of this pose is used as 'parent frame' for the controls
#which have a fixed orientation.
Header header

# Name of this marker. Only necessary if you are sending multiple markers.
# See InteractiveMarkerArray for details.
string name

# Initial pose of the interactive marker. Defines the pivot point for rotations.
geometry_msgs/Pose pose

# Scale to be used for default controls (default=1).
float32 scale

# Menu associated with this marker (max. depth is 2).
Menu[] menu

# List of controls displayed for this marker.
# To delete an interactive marker, send one without controls.
InteractiveMarkerControl[] controls

# If this marker should be frame-locked, i.e. retransformed 
# into its parent frame every timestep.
bool frame_locked

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: visualization_msgs/Menu
# menu / entry title
string title

# entries for this menu
# if empty, this menu represents a simple menu entry itself
string[] entries

================================================================================
MSG: visualization_msgs/InteractiveMarkerControl
# represents a control that is to be displayed together with an interactive marker

# Identifying string for this control.
# You need to assign a unique value to this to receive feedback from the GUI
# on what actions the user performs on this control (e.g. a button click).
string name

# Defines the local coordinate frame (relative to the pose of the parent
# interactive marker) in which is being rotated and translated.
# Note: Does not influence the pose of the contained markers.
geometry_msgs/Quaternion orientation

# Interaction mode for this control
# 
# NONE: this control is only meant for visualization, context menu is deactivated
# MENU: like none, but right-click menu is active
# BUTTON: element can be left-clicked
# MOVE_AXIS: Translate along local x-axis
# MOVE_PLANE: Translate in local y-z plane
# ROTATE_AXIS: Rotate around local x-axis
# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS
byte NONE = 0 
byte MENU = 1
byte BUTTON = 2
byte MOVE_AXIS = 3 
byte MOVE_PLANE = 4
byte ROTATE_AXIS = 5
byte MOVE_ROTATE = 6

byte interaction_mode

# how should the orientation be updated?
# INHERIT: follow orientation of interactive marker
# FIXED: keep orientation fixed at initial state
# VIEW_FACING: align y-z plane with screen (x: forward, y:left, z:up)
byte INHERIT = 0 
byte FIXED = 1
byte VIEW_FACING = 2 

byte orientation_mode

# if true, the contained markers will also be visible
# when the gui is not in interactive mode
bool always_visible

# Markers to be displayed as custom visual representation.
# Leave this empty to use the default control handles.
#
# Note: 
# - The markers can be defined in an arbitrary coordinate frame,
#   but will be transformed into the local frame of the interactive marker.
# - If the header of a marker is empty, its pose will be interpreted as 
#   relative to the pose of the parent interactive marker.
Marker[] markers

# Short description (<80 characters) of what this control does,
# e.g. "Move the robot". If no tool tip is given, a generic description
# based on the interaction mode is assigned.
string tool_tip

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

byte ARROW=0
byte CUBE=1
byte SPHERE=2
byte CYLINDER=3
byte LINE_STRIP=4
byte LINE_LIST=5
byte CUBE_LIST=6
byte SPHERE_LIST=7
byte POINTS=8
byte TEXT_VIEW_FACING=9
byte MESH_RESOURCE=10
byte TRIANGLE_LIST=11

byte ADD=0
byte MODIFY=0
byte DELETE=2

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

"""
  __slots__ = ['header','name','pose','scale','menu','controls','frame_locked']
  _slot_types = ['Header','string','geometry_msgs/Pose','float32','visualization_msgs/Menu[]','visualization_msgs/InteractiveMarkerControl[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,name,pose,scale,menu,controls,frame_locked
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InteractiveMarker, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.name is None:
        self.name = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.scale is None:
        self.scale = 0.
      if self.menu is None:
        self.menu = []
      if self.controls is None:
        self.controls = []
      if self.frame_locked is None:
        self.frame_locked = False
    else:
      self.header = std_msgs.msg._Header.Header()
      self.name = ''
      self.pose = geometry_msgs.msg.Pose()
      self.scale = 0.
      self.menu = []
      self.controls = []
      self.frame_locked = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7df.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale))
      length = len(self.menu)
      buff.write(_struct_I.pack(length))
      for val1 in self.menu:
        _x = val1.title
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.entries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.entries:
          length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.controls:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.orientation
        _x = _v1
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2bB.pack(_x.interaction_mode, _x.orientation_mode, _x.always_visible))
        length = len(val1.markers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.markers:
          _v2 = val2.header
          buff.write(_struct_I.pack(_v2.seq))
          _v3 = _v2.stamp
          _x = _v3
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v2.frame_id
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.ns
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
          _v4 = val2.pose
          _v5 = _v4.position
          _x = _v5
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v6 = _v4.orientation
          _x = _v6
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v7 = val2.scale
          _x = _v7
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v8 = val2.color
          _x = _v8
          buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
          _v9 = val2.lifetime
          _x = _v9
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          buff.write(_struct_B.pack(val2.frame_locked))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(val2.colors)
          buff.write(_struct_I.pack(length))
          for val3 in val2.colors:
            _x = val3
            buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
          _x = val2.text
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mesh_resource
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_B.pack(val2.mesh_use_embedded_materials))
        _x = val1.tool_tip
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.frame_locked))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale,) = _struct_7df.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.menu = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.Menu()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.title = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.entries = []
        for i in xrange(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2 = str[start:end]
          val1.entries.append(val2)
        self.menu.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controls = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarkerControl()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v10 = val1.orientation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.interaction_mode, _x.orientation_mode, _x.always_visible,) = _struct_2bB.unpack(str[start:end])
        val1.always_visible = bool(val1.always_visible)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.markers = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.Marker()
          _v11 = val2.header
          start = end
          end += 4
          (_v11.seq,) = _struct_I.unpack(str[start:end])
          _v12 = _v11.stamp
          _x = _v12
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v11.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.ns = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
          _v13 = val2.pose
          _v14 = _v13.position
          _x = _v14
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v15 = _v13.orientation
          _x = _v15
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v16 = val2.scale
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v17 = val2.color
          _x = _v17
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
          _v18 = val2.lifetime
          _x = _v18
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          start = end
          end += 1
          (val2.frame_locked,) = _struct_B.unpack(str[start:end])
          val2.frame_locked = bool(val2.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in xrange(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.colors = []
          for i in xrange(0, length):
            val3 = std_msgs.msg.ColorRGBA()
            _x = val3
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
            val2.colors.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.mesh_resource = str[start:end]
          start = end
          end += 1
          (val2.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
          val2.mesh_use_embedded_materials = bool(val2.mesh_use_embedded_materials)
          val1.markers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.tool_tip = str[start:end]
        self.controls.append(val1)
      start = end
      end += 1
      (self.frame_locked,) = _struct_B.unpack(str[start:end])
      self.frame_locked = bool(self.frame_locked)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7df.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale))
      length = len(self.menu)
      buff.write(_struct_I.pack(length))
      for val1 in self.menu:
        _x = val1.title
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.entries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.entries:
          length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      length = len(self.controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.controls:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v19 = val1.orientation
        _x = _v19
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_2bB.pack(_x.interaction_mode, _x.orientation_mode, _x.always_visible))
        length = len(val1.markers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.markers:
          _v20 = val2.header
          buff.write(_struct_I.pack(_v20.seq))
          _v21 = _v20.stamp
          _x = _v21
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v20.frame_id
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.ns
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_3i.pack(_x.id, _x.type, _x.action))
          _v22 = val2.pose
          _v23 = _v22.position
          _x = _v23
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v24 = _v22.orientation
          _x = _v24
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          _v25 = val2.scale
          _x = _v25
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v26 = val2.color
          _x = _v26
          buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
          _v27 = val2.lifetime
          _x = _v27
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          buff.write(_struct_B.pack(val2.frame_locked))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          length = len(val2.colors)
          buff.write(_struct_I.pack(length))
          for val3 in val2.colors:
            _x = val3
            buff.write(_struct_4f.pack(_x.r, _x.g, _x.b, _x.a))
          _x = val2.text
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.mesh_resource
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_B.pack(val2.mesh_use_embedded_materials))
        _x = val1.tool_tip
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.frame_locked))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.scale,) = _struct_7df.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.menu = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.Menu()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.title = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.entries = []
        for i in xrange(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2 = str[start:end]
          val1.entries.append(val2)
        self.menu.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.controls = []
      for i in xrange(0, length):
        val1 = visualization_msgs.msg.InteractiveMarkerControl()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        _v28 = val1.orientation
        _x = _v28
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 3
        (_x.interaction_mode, _x.orientation_mode, _x.always_visible,) = _struct_2bB.unpack(str[start:end])
        val1.always_visible = bool(val1.always_visible)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.markers = []
        for i in xrange(0, length):
          val2 = visualization_msgs.msg.Marker()
          _v29 = val2.header
          start = end
          end += 4
          (_v29.seq,) = _struct_I.unpack(str[start:end])
          _v30 = _v29.stamp
          _x = _v30
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          _v29.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.ns = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.id, _x.type, _x.action,) = _struct_3i.unpack(str[start:end])
          _v31 = val2.pose
          _v32 = _v31.position
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v33 = _v31.orientation
          _x = _v33
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v34 = val2.scale
          _x = _v34
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v35 = val2.color
          _x = _v35
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
          _v36 = val2.lifetime
          _x = _v36
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          start = end
          end += 1
          (val2.frame_locked,) = _struct_B.unpack(str[start:end])
          val2.frame_locked = bool(val2.frame_locked)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in xrange(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.points.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.colors = []
          for i in xrange(0, length):
            val3 = std_msgs.msg.ColorRGBA()
            _x = val3
            start = end
            end += 16
            (_x.r, _x.g, _x.b, _x.a,) = _struct_4f.unpack(str[start:end])
            val2.colors.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.text = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.mesh_resource = str[start:end]
          start = end
          end += 1
          (val2.mesh_use_embedded_materials,) = _struct_B.unpack(str[start:end])
          val2.mesh_use_embedded_materials = bool(val2.mesh_use_embedded_materials)
          val1.markers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.tool_tip = str[start:end]
        self.controls.append(val1)
      start = end
      end += 1
      (self.frame_locked,) = _struct_B.unpack(str[start:end])
      self.frame_locked = bool(self.frame_locked)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
_struct_7df = struct.Struct("<7df")
_struct_3i = struct.Struct("<3i")
_struct_2bB = struct.Struct("<2bB")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
