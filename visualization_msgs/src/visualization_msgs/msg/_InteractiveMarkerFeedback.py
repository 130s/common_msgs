"""autogenerated by genmsg_py from InteractiveMarkerFeedback.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class InteractiveMarkerFeedback(roslib.message.Message):
  _md5sum = "f3a9d9042bdfbcd749d8e8358cd412f9"
  _type = "visualization_msgs/InteractiveMarkerFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# message that is sent back from the GUI 
# when the status of an interactive marker was modified by the user

# specifies which interactive marker and control this message refers to
string marker_name
string control_name

# specifies what type of event happened
# RECEIVE/LOSE_FOCUS: mouse enters or leaves the control's screen area
# MENU_SELECT: a menu entry has been selected
# BUTTON_CLICK: a button control has been clicked
# POSE_UPDATE: the pose has been changed using one of the controls
byte POSE_UPDATE = 0
byte RECEIVE_FOCUS = 1
byte LOSE_FOCUS = 2
byte MENU_SELECT = 3
byte BUTTON_CLICK = 4

byte event_type

# current pose of the marker
geometry_msgs/Pose pose

# contains the text of a menu / sub menu entry, if one has been selected
# first entry: selected top-level item (if any)
# second entry: selected second-level item (if any)
string[] selected_menu_entry

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  POSE_UPDATE = 0
  RECEIVE_FOCUS = 1
  LOSE_FOCUS = 2
  MENU_SELECT = 3
  BUTTON_CLICK = 4

  __slots__ = ['marker_name','control_name','event_type','pose','selected_menu_entry']
  _slot_types = ['string','string','byte','geometry_msgs/Pose','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       marker_name,control_name,event_type,pose,selected_menu_entry
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(InteractiveMarkerFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.marker_name is None:
        self.marker_name = ''
      if self.control_name is None:
        self.control_name = ''
      if self.event_type is None:
        self.event_type = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.selected_menu_entry is None:
        self.selected_menu_entry = []
    else:
      self.marker_name = ''
      self.control_name = ''
      self.event_type = 0
      self.pose = geometry_msgs.msg.Pose()
      self.selected_menu_entry = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.marker_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_b7d.pack(_x.event_type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
      length = len(self.selected_menu_entry)
      buff.write(_struct_I.pack(length))
      for val1 in self.selected_menu_entry:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.marker_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_name = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.event_type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _struct_b7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.selected_menu_entry = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.selected_menu_entry.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.marker_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.control_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_b7d.pack(_x.event_type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
      length = len(self.selected_menu_entry)
      buff.write(_struct_I.pack(length))
      for val1 in self.selected_menu_entry:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.marker_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.control_name = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.event_type, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _struct_b7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.selected_menu_entry = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.selected_menu_entry.append(val1)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b7d = struct.Struct("<b7d")
